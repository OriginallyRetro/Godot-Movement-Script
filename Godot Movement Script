extends CharacterBody3D

# Constant for the speed at which the character moves.
const SPEED = 5.0

# Constant for the initial velocity of the character's jump.
const JUMP_VELOCITY = 4.5

# Gravity is fetched from the project settings. This makes sure the gravity is consistent with other physics bodies in the game.
var gravity = ProjectSettings.get_setting("physics/3d/default_gravity")

# @onready keyword initializes the variable once the node is added to the scene tree. 
# These are references to the neck and camera nodes in the scene.
@onready var neck := $Neck
@onready var camera := $Neck/Camera3D

# This function handles specific types of input that aren't processed elsewhere.
# It is used for handling mouse input events.
func _unhandled_input(event: InputEvent) -> void:
    # Check if the input event is a mouse button event.
    if event is InputEventMouseButton:
        # Capture the mouse cursor, hiding it and locking it to the center of the screen.
        Input.set_mouse_mode(Input.MOUSE_MODE_CAPTURED)
    
    # Check if the cancel action (e.g., pressing the Escape key) is triggered.
    elif event.is_action_pressed("ui_cancel"):
        # Make the mouse cursor visible and free it from the center of the screen.
        Input.set_mouse_mode(Input.MOUSE_MODE_VISIBLE)
    
    # If the mouse is captured (hidden and centered)...
    if Input.get_mouse_mode() == Input.MOUSE_MODE_CAPTURED:
        # Check if the mouse is moving.
        if event is InputEventMouseMotion:
            # Rotate the neck node based on horizontal mouse movement.
            neck.rotate_y(-event.relative.x + 0.001)
            # Rotate the camera node based on vertical mouse movement.
            camera.rotate_x(-event.relative.y * 0.001)
            # Clamp the camera's rotation to prevent it from flipping over completely.
            # Limits the up and down camera rotation between -30 and 60 degrees.
            camera.rotation.x = clamp(camera.rotation.x, deg_to_rad(-30), deg_to_rad(60))

# This function is called every physics frame (e.g., 60 times per second) to process physics-related code.
func _physics_process(delta):
    # If the character is not on the floor, apply gravity to the vertical velocity.
    if not is_on_floor():
        velocity.y -= gravity * delta

    # Handle the jump action.
    # If the jump action (e.g., pressing the Space key) is just pressed and the character is on the floor...
    if Input.is_action_just_pressed("ui_accept") and is_on_floor():
        # Set the vertical velocity to the jump velocity to make the character jump.
        velocity.y = JUMP_VELOCITY

    # Get the input direction from user input and handle movement/deceleration.
    # Input.get_vector returns a Vector2 based on input from left, right, forward, and backward actions.
    var input_dir = Input.get_vector("Left", "Right", "Forward", "Backward")
    
    # Calculate the direction based on the neck's transformation and input direction.
    # Transforming the 2D input direction into a 3D direction based on the neck's orientation.
    var direction = (neck.transform.basis * Vector3(input_dir.x, 0, input_dir.y)).normalized()
    
    # If there is input in any direction...
    if direction:
        # Set the character's velocity based on the direction and speed.
        velocity.x = direction.x * SPEED
        velocity.z = direction.z * SPEED
    else:
        # If no input direction, smoothly reduce the character's velocity to zero (decelerate).
        velocity.x = move_toward(velocity.x, 0, SPEED)
        velocity.z = move_toward(velocity.z, 0, SPEED)

    # Move the character and slide along surfaces using the current velocity.
    move_and_slide()
