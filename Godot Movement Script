extends CharacterBody3D

var SPEED = 5.0
var JUMP_VELOCITY = 4
var CROUCH_SPEED = 2.0  # Speed when crouching
var CROUCH_HEIGHT = 0.5  # Height when crouching
var NORMAL_HEIGHT = 1.0  # Normal height
const CAMERA_ROTATION_SPEED = 1.5
var SPRINT_MULTIPLIER = 2  # Multiplier for sprinting speed

# Get the gravity from the project settings to be synced with RigidDynamicBody nodes.
var gravity: float = ProjectSettings.get_setting("physics/3d/default_gravity")
@onready var neck := $Neck
@onready var camera := $Neck/Camera3D

var is_crouching = false

func _unhandled_input(event: InputEvent) -> void:
	if event is InputEventMouseButton:
		Input.set_mouse_mode(Input.MOUSE_MODE_CAPTURED)
	elif event.is_action_pressed("ui_cancel"):
		Input.set_mouse_mode(Input.MOUSE_MODE_VISIBLE)
	if Input.get_mouse_mode() == Input.MOUSE_MODE_CAPTURED:
		if event is InputEventMouseMotion:
			neck.rotate_y(-event.relative.x * 0.01)
			camera.rotate_x(-event.relative.y * 0.01)
			camera.rotation.x = clamp(camera.rotation.x, deg_to_rad(-30), deg_to_rad(60))

func _physics_process(delta: float) -> void:
	# Add the gravity.
	if not is_on_floor():
		velocity.y -= gravity * delta

	# Handle Jump.
	if Input.is_action_just_pressed("ui_accept") and is_on_floor():
		velocity.y = JUMP_VELOCITY

	# Check if the shift key is pressed for sprinting.
	var is_sprinting = Input.is_action_pressed("Shift")

	# Check if the crouch key is pressed.
	is_crouching = Input.is_action_pressed("Crouch")

	# Get the input direction and handle the movement/deceleration.
	var input_dir := Input.get_vector("Left", "Right", "Forward", "Backward")
	var direction = (neck.transform.basis * Vector3(input_dir.x, 0, input_dir.y)).normalized()
	if direction:
		var speed = SPEED
		if is_sprinting:
			speed *= SPRINT_MULTIPLIER
		if is_crouching:
			speed *= CROUCH_SPEED
			# Adjust the height for crouching
			scale.y = CROUCH_HEIGHT
		else:
			scale.y = NORMAL_HEIGHT
		velocity.x = direction.x * speed
		velocity.z = direction.z * speed
	else:
		velocity.x = move_toward(velocity.x, 0, SPEED)
		velocity.z = move_toward(velocity.z, 0, SPEED)

	move_and_slide()

func _handle_camera_rotation(delta: float) -> void:
	# Check if the left arrow key is pressed.
	if Input.is_action_pressed("ui_left"):
		# Rotate the neck to the left around the Y-axis.
		neck.rotate_y(CAMERA_ROTATION_SPEED * delta)
	
	# Check if the right arrow key is pressed.
	if Input.is_action_pressed("ui_right"):
		# Rotate the neck to the right around the Y-axis.
		neck.rotate_y(-CAMERA_ROTATION_SPEED * delta)
	
	# Check if the up arrow key is pressed.
	if Input.is_action_pressed("ui_down"):
		# Rotate the camera up around the X-axis.
		camera.rotate_x(-CAMERA_ROTATION_SPEED * delta)
	
	# Check if the down arrow key is pressed.
	if Input.is_action_pressed("ui_up"):
		# Rotate the camera down around the X-axis.
		camera.rotate_x(CAMERA_ROTATION_SPEED * delta)
	
	# Clamp the camera's rotation to prevent excessive up/down movement.
	# Limits the camera rotation to prevent flipping over.
	camera.rotation.x = clamp(camera.rotation.x, deg_to_rad(-40), deg_to_rad(60))
