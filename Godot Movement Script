extends CharacterBody3D

const AK_ROTATION_SPEED: float = 3.0
const camera_ROTATION_SPEED: float = 1.5
const FALL_DAMAGE_THRESHOLD: float = 10.0
const NORMAL_HEIGHT: float = 1.0
const MAX_JUMPS = 2
@export_subgroup("HEABOB MECHANICS")
@export var headbob_move_amount = 0.06
@export var headbob_frequency = 2.0
@export var headbob_time := 0.0

@onready var top_of_head: RayCast3D = $Neck/Raycasts/TopOfHead
@onready var face_level: RayCast3D = $Neck/Raycasts/FaceLevel
@onready var wall_run_right: RayCast3D = $Neck/Raycasts/WallRunRight
@onready var wall_run_left: RayCast3D = $Neck/Raycasts/WallRunLeft

@export_subgroup("SLIDING")
@export var SLIDE_HEIGHT: float = 0.3
@export var slide_speed: float = 30.0
@export var slide_friction: float = 0.25
@export var slide_duration: float = 1.0

@export_subgroup("CROUCHING")
@export var crouch_speed: float = 3.5
@export var crouch_height: float = 0.5
@export var crouch_time_accumalted: float = 0.0
@export var crouch_transition_speed: float = 5.0

@export_subgroup("MOVEMENT")
@export var default_speed: float = 5.5
@export var old_velocity: float = 0.0

@export_subgroup("SPRINTING")
@export var sprint_multipler: float = 2.0
@export var sprint_time_accumalted: float = 0.0

@export_subgroup("JUMPING")
@export var jump_velocity: float = 4.0
@export var jump_counter = 0
@export_subgroup("AIR_MECHANICS")
@export var air_cap := 1
@export var air_acceleration := 850.0
@export var air_move_speed := 550.0

@export_subgroup("EXTRA")
@export var sliding_fov: float = 90.0
@export var crouch_fov: float = 70.0
@export var normal_fov: float = 80.0  # Normal Field of View
@export var sprint_fov: float = 105.0  # Sprinting Field of View
@export var fov_transition_speed: float = 5.0  # Speed at which the FOV transition occurs

@onready var neck := $Neck
@onready var camera: Camera3D = $Neck/Camera3D
@onready var collision_shape := $CollisionShape3D
@onready var sfx_jump_sound_effect: AudioStreamPlayer = $SFX_JumpSoundEffect

@export_subgroup("WALLRUNNING MECHANICS")
@export var can_wall_run_timer := 6
@export var wall_run_jump_velocity := 6.0
@export var wall_run_fov := 125.0


var gravity = ProjectSettings.get_setting("physics/3d/default_gravity")
var can_wall_run = true
var is_crouching = false
var is_sliding = false
var slide_timer = 0.0
var slide_direction: Vector3 = Vector3.ZERO
var wish_dir := Vector3.ZERO

var jumped_from_left_wall = true
var jumped_from_right_wall = true

var r_tilt = true
var l_tilt = true
var camera_should_correct_orientation = false
var running_on_right_wall_camera_orientation = Vector3(0, 0, 15)
var running_on_left_wall_camera_orientation = Vector3(0,0,-15)
var normal_camera_orientation = Vector3(0,0,0)


func _ready():
	#Unsure for the reason why but when you spawn in your camera rotation is off so that fixes it!
	camera.rotation = Vector3(0, 0, 0)
	Input.set_mouse_mode(Input.MOUSE_MODE_CAPTURED)

func _unhandled_input(event: InputEvent) -> void:
	if Input.is_action_pressed("Tab"):
		$PauseMenu.pause()
		if event is InputEventMouseButton:
			Input.set_mouse_mode(Input.MOUSE_MODE_CAPTURED)
	if event is InputEventMouseButton:
		Input.set_mouse_mode(Input.MOUSE_MODE_CAPTURED)
	if event.is_action_pressed("ui_cancel"):
		get_tree().quit()
	if Input.get_mouse_mode() == Input.MOUSE_MODE_CAPTURED:
		if event is InputEventMouseMotion:
			neck.rotate_y(-event.relative.x * 0.01)
			camera.rotate_x(-event.relative.y * 0.01)
			camera.rotation.x = clamp(camera.rotation.x, deg_to_rad(-30), deg_to_rad(60))
	
func _physics_process(delta: float) -> void:
	check_mantle()
	check_if_can_wallrun(delta)
	_headbob_effect(delta)
	handle_air_movement(delta)	
	handle_ground_movement(delta)
	move_and_slide()
	handle_arrowkeys(delta)
	handle_jumping()
	handle_crouching(delta)
	handle_sliding(delta)
	handle_cameras_rotation()
	if not is_on_floor():
		velocity.y -= gravity * delta
	
	
func handle_crouching(delta):
	is_crouching = Input.is_action_pressed("Crouch") and is_on_floor()
	
	# Smooth transition for crouch height
	if is_crouching:
		scale.y = lerp(scale.y, crouch_height, crouch_transition_speed * delta)
		camera.fov = lerp(camera.fov, crouch_fov, fov_transition_speed * delta)
		crouch_time_accumalted += delta
		if crouch_time_accumalted >= 35.0:
			crouch_time_accumalted = 0.0
	else:
		camera.fov = lerp(camera.fov, normal_fov, fov_transition_speed * delta)
		scale.y = lerp(scale.y, NORMAL_HEIGHT, crouch_transition_speed * delta)
		crouch_time_accumalted = 0.0

func handle_sliding(delta):
	var SHOULD_SLIDE = Input.is_action_pressed("Slide") and is_on_floor()
	var INPUT_DIRECTION := Input.get_vector("Left", "Right", "Forward", "Backward")
	var DIRECTION = (neck.transform.basis * Vector3(INPUT_DIRECTION.x, 0, INPUT_DIRECTION.y)).normalized()
	var IS_SPRINTING = Input.is_action_pressed("Shift")
	
	if SHOULD_SLIDE and not is_sliding:
		is_sliding = true
		slide_timer = slide_duration
		slide_direction = neck.transform.basis.z.normalized() * -1

	if is_sliding:
		headbob_move_amount = 0.0
		headbob_frequency = 0.0
		headbob_time = 0.0
		if Input.is_action_pressed("ui_accept"):
			is_sliding = false
			slide_timer = 0.0

		elif slide_timer > 0:
			slide_timer -= delta
			var time_fraction = max(slide_timer / slide_duration, 0)
			var CURRENT_slide_speed = lerp(slide_speed * 0.5, slide_speed, time_fraction)
			scale.y = lerp(SLIDE_HEIGHT, NORMAL_HEIGHT, time_fraction)
			velocity.x = slide_direction.x * CURRENT_slide_speed
			velocity.z = slide_direction.z * CURRENT_slide_speed
			velocity.x *= (1 - slide_friction)
			velocity.z *= (1 - slide_friction)
			if slide_timer <= 0:
				is_sliding = false
		else:
			is_sliding = false
	else:
		if DIRECTION:
			if is_crouching:
				default_speed = crouch_speed
			else:
				default_speed = 5.0
			if IS_SPRINTING:
				default_speed *= sprint_multipler
			else:
				default_speed = 5.0

			velocity.x = DIRECTION.x * default_speed
			velocity.z = DIRECTION.z * default_speed
			
		else:
			velocity.x = move_toward(velocity.x, 0, default_speed)
			velocity.z = move_toward(velocity.z, 0, default_speed)
			headbob_move_amount = 0.06
			headbob_frequency = 2.0
			headbob_time = 0.0

func handle_sprinting(delta):
	var IS_SPRINTING = Input.is_action_pressed("Shift")
	if IS_SPRINTING:
		sprint_time_accumalted += delta
		camera.fov = lerp(camera.fov, sprint_fov, fov_transition_speed * delta)
		if sprint_time_accumalted >= 35.0:
			sprint_time_accumalted = 0.0
			camera.fov = lerp(camera.fov, sprint_fov, fov_transition_speed * delta)
	else:
		sprint_time_accumalted = 0.0
		camera.fov = lerp(camera.fov, normal_fov, fov_transition_speed * delta)

func handle_jumping():

	if Input.is_action_just_pressed("Jump") and jump_counter < MAX_JUMPS:
		jump_counter += 1
		velocity.y = jump_velocity
		sfx_jump_sound_effect.play()
	else:
		if is_on_floor():
			jump_counter = 0

func handle_arrowkeys(delta):
	if Input.is_action_pressed("ui_left"):
		neck.rotate_y(AK_ROTATION_SPEED * delta)
	
	if Input.is_action_pressed("ui_right"):
		neck.rotate_y(-AK_ROTATION_SPEED * delta)

	if Input.is_action_pressed("ui_up"):
		camera.rotate_x(AK_ROTATION_SPEED * delta)
	
	if Input.is_action_pressed("ui_down"):
		camera.rotate_x(-AK_ROTATION_SPEED * delta)

func handle_cameras_rotation() -> void:
	camera.rotation.x = clamp(camera.rotation.x, deg_to_rad(-60), deg_to_rad(60))

func check_mantle():
	var has_ledge = (face_level.is_colliding() and not top_of_head.is_colliding())
	if has_ledge:
		gravity = 0
		velocity.y = 0
		
		if has_ledge and Input.is_action_just_pressed("ui_accept"):
			# Calculate the correct forward direction
			var forward_vector = -neck.global_transform.basis.z.normalized()
			# Calculate the target position
			var target_position = position + Vector3(0, 1.3, 0) + (forward_vector * 0.8)
			
			# Create a Tween node
			var climb_tween = create_tween()
			climb_tween.tween_property(self, "position", target_position, 0.45)
	else:
		gravity = ProjectSettings.get_setting("physics/3d/default_gravity")

func wall_run_timer():
	
	if Input.is_action_pressed("Shift") and velocity.z:
		can_wall_run_timer -= 1
		
	if can_wall_run_timer <= 0:
		
		can_wall_run = true
		
	else:
		
		can_wall_run = false


func check_if_can_wallrun(delta: float):
	if not can_wall_run:
		# Reset gravity and camera properties when not wall running
		gravity = ProjectSettings.get_setting("physics/3d/default_gravity")
		camera.fov = lerp(camera.fov, normal_fov, fov_transition_speed * delta)
		# Handle wall-running
	if can_wall_run:
		if wall_run_right.is_colliding() and not is_on_floor():
			gravity *= 0.5  # Reduce gravity
			camera.fov = lerp(camera.fov, wall_run_fov, fov_transition_speed * delta)
			create_tween().tween_property(camera, "rotation_degrees", running_on_right_wall_camera_orientation, 0.3)
			camera_should_correct_orientation = true
			if Input.is_action_just_pressed("Jump") and jumped_from_left_wall:
				jumped_from_right_wall = true
				jumped_from_left_wall = false
				velocity.y = wall_run_jump_velocity  # Standard jump velocity

		elif wall_run_left.is_colliding() and not is_on_floor():
			create_tween().tween_property(camera, "rotation_degrees", running_on_left_wall_camera_orientation, 0.3)
			gravity *= 0.5  # Reduce gravity
			camera.fov = lerp(camera.fov, wall_run_fov, fov_transition_speed * delta)
			camera_should_correct_orientation = true
			if Input.is_action_just_pressed("Jump") and jumped_from_right_wall:
				jumped_from_left_wall = true
				jumped_from_right_wall = false
				velocity.y = wall_run_jump_velocity  # Standard jump velocity
				
	# Reset state when not wall-running
		else:
			if wall_run_left.is_colliding() or wall_run_right.is_colliding() == false:#
				if camera_should_correct_orientation:
					create_tween().tween_property(camera, "rotation_degrees", normal_camera_orientation, .3)
					camera_should_correct_orientation = false
				camera.fov = lerp(camera.fov, normal_fov, fov_transition_speed * delta)
				gravity = ProjectSettings.get_setting("physics/3d/default_gravity")
				
		if is_on_floor():
			jumped_from_left_wall = true
			jumped_from_right_wall = true
			if camera_should_correct_orientation:
				create_tween().tween_property(camera, "rotation_degrees", normal_camera_orientation, .3)
				camera_should_correct_orientation = false


func _headbob_effect(delta):
	headbob_time += delta * self.velocity.length()
	camera.transform.origin = Vector3(
		cos(headbob_time * headbob_frequency * 0.5) * headbob_move_amount,
		 sin(headbob_time * headbob_frequency) * headbob_move_amount,
		 0)

func handle_air_movement(delta):
	#handling air speed
	var current_speed_in_wish_dir = self.velocity.dot(wish_dir)
	var capped_speed = min((air_move_speed * wish_dir).length(), air_cap)
	var add_speed_till_cap = capped_speed - current_speed_in_wish_dir
	
	if add_speed_till_cap > 0:
		var acceleration_speed = air_acceleration * air_move_speed * delta
		acceleration_speed = min(acceleration_speed, add_speed_till_cap)
		self.velocity += acceleration_speed * wish_dir
		#==================

func handle_ground_movement(delta):
		var ground_acceleration := 25.0
		var ground_deceleration := 0.05
		var ground_friction := 0.02
		var current_speed_in_wish_dir = self.velocity.dot(wish_dir)
		
		var add_speed_till_cap = sprint_multipler - current_speed_in_wish_dir
		if add_speed_till_cap > 0:
			var acceleration_speed = ground_acceleration * delta * sprint_multipler
			acceleration_speed = min(acceleration_speed, add_speed_till_cap)
			self.velocity += acceleration_speed * wish_dir
			
		var control = max(self.velocity.length(), ground_deceleration)
		var drop = control * ground_friction * delta
		var new_speed = max(self.velocity.length() - drop, 0.0)
		if self.velocity.length() > 0:
			new_speed /= self.velocity.length()
		self.velocity *= new_speed
